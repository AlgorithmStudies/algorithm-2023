//5
//1 2 
//2 3/ /+1,+1
//4 5 /+2,+2
//6 7/ +2,+2
//4  / -2,-3
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main {
	static int atoi(String str) {
		return Integer.parseInt(str);
	}
	static int N, k, ans=Integer.MAX_VALUE;
	static int jump[][];
	
	static class StoneBridge{
		int n, sum;
		boolean flag;
		
		public StoneBridge(int n, int sum, boolean flag) {
			this.n=n;
			this.sum=sum;
			this.flag=flag;
		}
	}
	public static void main(String[] args) throws IOException {
		input();
		// TODO Auto-generated method stub

	}
	static void input() throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer(br.readLine());
	
		N=atoi(st.nextToken());
		
		jump=new int[N+1][2];
		
		for(int i=1;i<N;i++) {
			st=new StringTokenizer(br.readLine());
			int small=atoi(st.nextToken());
			int big=atoi(st.nextToken());
			jump[i][0]=small; //1/2/4/6
			jump[i][1]=big;//2/3/5/7
	//		System.out.println(jump[i][1]);
		
		
		}
		k=atoi(br.readLine());//마지막줄 k
//		System.out.println(k);
		bfs();
	}
	static void bfs() {
		Queue<StoneBridge> bridge=new ArrayDeque<>();
		bridge.offer(new StoneBridge(1,0,false));
		
		while(!bridge.isEmpty()) {
			StoneBridge s=bridge.poll();
			
			if(s.n>N)
				continue;
			
			if(s.n==N) {
				ans=Math.min(ans, s.sum);
	//		System.out.println(s.sum);//5/7/10/8/10/12/13/5
									//+1/+2/+2/-2/+2/+2+1
				continue;
			}
			bridge.offer(new StoneBridge(s.n+1,s.sum+jump[s.n][0],s.flag));
			bridge.offer(new StoneBridge(s.n+2, s.sum+jump[s.n][1],s.flag));
//			System.out.println(s.n+1);
//	 		System.out.println(s.n+2);
			if(s.flag==false) {
				bridge.offer(new StoneBridge(s.n+3, s.sum+k, true));
		//		System.out.println(s.n+3);
			}	
		}
		System.out.println(ans);
	}
}
