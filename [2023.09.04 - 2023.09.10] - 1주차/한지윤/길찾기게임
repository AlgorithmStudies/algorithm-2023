//이진트리/이진탐색아님!!/전위순회(preorder) 현재노드->왼쪽->오른쪽//전위후위 방향다름!!!
//후위순회(postorder) 왼쪽->오른쪽-현재노드/방향다름!!인지
//필요한거 전체구조/전위,후외정의/추가Node/왼쪽,오른쪽비교/비교에따른 재정의
import java.util.*;
class Solution {
    static int[][] answer;
    static int idx;
    public int[][] solution(int[][] nodeinfo) {
        answer=new int[2][nodeinfo.length];
        ArrayList<Node> list=new ArrayList<>();
        for(int i=0;i<nodeinfo.length;i++){
            list.add(new Node(i+1, nodeinfo[i][0],nodeinfo[i][1], null,null));
        }
        Collections.sort(list);
      
        Node root=list.get(0);
        for(int i=1;i<list.size();i++){
            insertNode(root,list.get(i));
        }
        idx=0;
        preorder(root);
        idx=0;
        postorder(root);
        
        return answer;
    }
    
    //전위순회
    static void preorder(Node root){
        if(root !=null){
            answer[0][idx++]=root.num;
            preorder(root.left);
            preorder(root.right);
        }
    }
    
    //후위순회
    static void postorder(Node root){
        if(root !=null){
            postorder(root.left);
            postorder(root.right);
            answer[1][idx++]=root.num;
        }
    }
    //현재노드, 왼쪽, 오른쪽노드추가정의
    static void insertNode(Node parent, Node child){
        //왼쪽 자식
        if(parent.x> child.x){
            if(parent.left ==null){
                parent.left=child;
            }else{
                insertNode(parent.left, child);
            }
        }else{
            if(parent.right == null){
                parent.right=child;
            //오른쪽자식
            }else{
                insertNode(parent.right, child);
            }
        }
    } 
    static class Node implements Comparable<Node>{
        int num;
        int x;
        int y;
        Node left; //왼쪽노드
        Node right; //오른쪽 노드
        //숫자,왼쪽,오른쪽집어넣으려면 상세비교하기위해x, y도 필요함
        Node(int num, int x, int y, Node left, Node right){
            this.num=num;
            this.x=x;
            this.y=y;
            this.left=left;
            this.right=right;
        }
        //y좌표가 큰순서대로라면 x좌표가 작은순서대로
        @Override
        public int compareTo(Node o1){
            if(this.y==o1.y){
                return this.x-o1.x;
            }
         //   System.out.print(o1.y+" ");//3 5 3 3 3 5 3 5 5 3 3 1 3 3
        //    System.out.print(this.y+" ");// 5 3 5 1 1 3 6 6 6 2 2 2 2 2
            return o1.y-this.y;//??this.y가 더클수도있는거아님?
   
        }
    } 
}
